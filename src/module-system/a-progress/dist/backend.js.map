{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B,yBAAyB,gBAAgB,GAAG,WAAW;AACvD;;AAEA,2BAA2B,YAAY;AACvC,sCAAsC,YAAY;AAClD;AACA;AACA;;AAEA,2BAA2B,iCAAiC;AAC5D;AACA,sCAAsC,YAAY;AAClD;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA,8BAA8B,qBAAqB;AACnD,qDAAqD,YAAY;AACjE,kCAAkC,iCAAiC;AACnE;;AAEA,8BAA8B,YAAY;AAC1C,sCAAsC,YAAY;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA,mBAAmB,mDAAmD;AACtE;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,uBAAuB;AACnD;;AAEA,iBAAiB,qBAAqB;AACtC;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,uBAAuB;AACnD;;AAEA,kBAAkB,qBAAqB;AACvC;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,uBAAuB;AACnD;;AAEA,kBAAkB,2BAA2B;AAC7C;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA,mBAAmB,kBAAkB;AACrC;AACA,+CAA+C,YAAY;AAC3D;AACA,qCAAqC,YAAY;AACjD;;AAEA,qBAAqB,uBAAuB;AAC5C;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;;;;;;;ACzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AC5CA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;;;;;;;;ACFA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC5BA,iBAAiB,mBAAO,CAAC,EAA0B;;AAEnD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA,2BAA2B,mBAAO,CAAC,GAA+B;AAClE;AACA;AACA,eAAe;AACf,KAAK;AACL;AACA,oBAAoB;AACpB,kBAAkB;AAClB,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACpBA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,sBAAsB;AACvC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,sBAAsB;AACvC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,sBAAsB;AACvC,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AChCA;AACA;AACA,kBAAkB,2BAA2B;AAC7C,kDAAkD,2BAA2B;AAC7E;;AAEA,kBAAkB,kBAAkB;AACpC,kDAAkD,kBAAkB;AACpE;;AAEA,mBAAmB,kBAAkB;AACrC,mDAAmD,kBAAkB;AACrE;AACA;;AAEA;AACA;;;;;;;;AChBA,iBAAiB,mBAAO,CAAC,GAAuB;;AAEhD;AACA;AACA;AACA;AACA;AACA;;;;;;;UCPA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-progress/./backend/src/bean/bean.progress.js","webpack://egg-born-module-a-progress/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-progress/./backend/src/beans.js","webpack://egg-born-module-a-progress/./backend/src/config/config.js","webpack://egg-born-module-a-progress/./backend/src/config/errors.js","webpack://egg-born-module-a-progress/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-progress/./backend/src/config/locales.js","webpack://egg-born-module-a-progress/./backend/src/config/socketio/progress.js","webpack://egg-born-module-a-progress/./backend/src/controller/progress.js","webpack://egg-born-module-a-progress/./backend/src/controllers.js","webpack://egg-born-module-a-progress/./backend/src/main.js","webpack://egg-born-module-a-progress/./backend/src/meta.js","webpack://egg-born-module-a-progress/./backend/src/models.js","webpack://egg-born-module-a-progress/./backend/src/routes.js","webpack://egg-born-module-a-progress/./backend/src/service/progress.js","webpack://egg-born-module-a-progress/./backend/src/services.js","webpack://egg-born-module-a-progress/webpack/bootstrap","webpack://egg-born-module-a-progress/webpack/before-startup","webpack://egg-born-module-a-progress/webpack/startup","webpack://egg-born-module-a-progress/webpack/after-startup"],"sourcesContent":["module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Progress extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'progress');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    get redis() {\n      if (!this._redis) this._redis = ctx.app.redis.get('io') || ctx.app.redis.get('cache');\n      return this._redis;\n    }\n\n    _getRedisKey({ progressId }) {\n      return `progress:${ctx.instance.id}:${progressId}`;\n    }\n\n    async _getRedisValue({ progressId }) {\n      const key = this._getRedisKey({ progressId });\n      const content = await this.redis.get(key);\n      return content ? JSON.parse(content) : null;\n    }\n\n    async _setRedisValue({ progressId, content, contentOld }) {\n      const expireTime = this.configModule.progress.expireTime;\n      const key = this._getRedisKey({ progressId });\n      if (contentOld) {\n        content = Object.assign({}, contentOld, content);\n      }\n      await this.redis.set(key, JSON.stringify(content), 'PX', expireTime);\n    }\n\n    async _updateRedisValue({ progressId, content }) {\n      const contentOld = await this._getRedisValue({ progressId });\n      await this._setRedisValue({ progressId, content, contentOld });\n    }\n\n    async _deleteRedisValue({ progressId }) {\n      const key = this._getRedisKey({ progressId });\n      await this.redis.del(key);\n    }\n\n    async create(options) {\n      if (!ctx.state.user || !ctx.state.user.op) return ctx.throw(403);\n      let progressId = options && options.progressId;\n      // create\n      if (!progressId) {\n        progressId = ctx.bean.util.uuidv4();\n      } else {\n        // check if exists\n        const item = await this._getRedisValue({ progressId });\n        if (item) return ctx.throw(403);\n      }\n      // redis\n      await this._setRedisValue({\n        progressId,\n        content: {\n          userId: ctx.state.user.op.id,\n          counter: 0,\n          done: 0,\n          abort: 0,\n          data: null,\n        },\n      });\n      // ok\n      return progressId;\n    }\n\n    async update({ progressId, progressNo = 0, total, progress, text }) {\n      if (!progressId) return;\n      const item = await this._getRedisValue({ progressId });\n      if (!item) {\n        // same as abort\n        // 1001: 'Operation Aborted',\n        ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      // abort\n      if (item.abort) {\n        // 1001: 'Operation Aborted',\n        ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      // data\n      const data = item.data || [];\n      if (data.length > progressNo + 1) {\n        data.splice(progressNo + 1, data.length - progressNo - 1);\n      }\n      data[progressNo] = { total, progress, text };\n      // update\n      await this._setRedisValue({\n        progressId,\n        content: {\n          counter: item.counter + 1,\n          data,\n        },\n        contentOld: item,\n      });\n      // publish\n      const ioMessage = {\n        userIdTo: item.userId,\n        content: {\n          ...item,\n          counter: item.counter + 1,\n          data,\n        },\n      };\n      await this._publish({ progressId, ioMessage });\n    }\n\n    async done({ progressId, message }) {\n      if (!progressId) return;\n      const item = await this._getRedisValue({ progressId });\n      if (!item) {\n        // same as abort\n        // 1001: 'Operation Aborted',\n        ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      // data\n      const data = { message };\n      // update\n      await this._setRedisValue({\n        progressId,\n        content: {\n          counter: item.counter + 1,\n          done: 1,\n          data,\n        },\n        contentOld: item,\n      });\n      // publish\n      const ioMessage = {\n        userIdTo: item.userId,\n        content: {\n          ...item,\n          counter: item.counter + 1,\n          done: 1,\n          data,\n        },\n      };\n      await this._publish({ progressId, ioMessage });\n    }\n\n    async error({ progressId, message }) {\n      if (!progressId) return;\n      const item = await this._getRedisValue({ progressId });\n      if (!item) {\n        // same as abort\n        // 1001: 'Operation Aborted',\n        ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      // data\n      const data = { message };\n      // update\n      await this._setRedisValue({\n        progressId,\n        content: {\n          counter: item.counter + 1,\n          done: -1,\n          data,\n        },\n        contentOld: item,\n      });\n      // publish\n      const ioMessage = {\n        userIdTo: item.userId,\n        content: {\n          ...item,\n          counter: item.counter + 1,\n          done: -1,\n          data,\n        },\n      };\n      await this._publish({ progressId, ioMessage });\n    }\n\n    async check({ progressId, counter, user }) {\n      if (!progressId) return null;\n      const item = await this._getRedisValue({ progressId });\n      if (!item || item.userId !== user.id || item.counter <= counter) return null;\n      return item;\n    }\n\n    async abort({ progressId, user }) {\n      if (!progressId) return;\n      const item = await this._getRedisValue({ progressId });\n      if (!item || item.userId !== user.id) return;\n      await this._setRedisValue({\n        progressId,\n        content: {\n          abort: 1,\n        },\n        contentOld: item,\n      });\n    }\n\n    async delete({ progressId, user }) {\n      if (!progressId) return;\n      const item = await this._getRedisValue({ progressId });\n      if (!item || item.userId !== user.id) return;\n      await this._deleteRedisValue({ progressId });\n    }\n\n    async _publish({ progressId, ioMessage }) {\n      await ctx.bean.io.publish({\n        path: `/a/progress/update/${progressId}`,\n        message: ioMessage,\n        messageClass: {\n          module: moduleInfo.relativeName,\n          messageClassName: 'progress',\n        },\n      });\n    }\n  }\n  return Progress;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // aProgress\n        const sql = `\n        CREATE TABLE aProgress (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            progressId varchar(50) DEFAULT NULL,\n            counter int(11) DEFAULT '0',\n            done int(11) DEFAULT '0',\n            abort int(11) DEFAULT '0',\n            data text DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n                  `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 2) {\n        // aProgress: add field userId\n        const sql = `\n        ALTER TABLE aProgress\n          ADD COLUMN userId int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 3) {\n        // drop table: aProgress\n        await this.ctx.model.query('drop table if exists aProgress');\n      }\n    }\n\n    async init(options) {}\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst beanProgress = require('./bean/bean.progress.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // global\n    progress: {\n      mode: 'ctx',\n      bean: beanProgress,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {};\n\n  // progress\n  config.progress = {\n    expireTime: 2 * 3600 * 1000, // default is 2 hours\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Operation Aborted',\n};\n","module.exports = {\n  'Operation Aborted': '操作已中止',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const progress = {\n    info: {\n      title: 'Progress',\n      persistence: false,\n    },\n  };\n  return progress;\n};\n","module.exports = app => {\n  class ProgressController extends app.Controller {\n    async check() {\n      const res = await this.service.progress.check({\n        progressId: this.ctx.request.body.progressId,\n        counter: this.ctx.request.body.counter,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async abort() {\n      await this.service.progress.abort({\n        progressId: this.ctx.request.body.progressId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.service.progress.delete({\n        progressId: this.ctx.request.body.progressId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success();\n    }\n  }\n  return ProgressController;\n};\n","const progress = require('./controller/progress.js');\n\nmodule.exports = app => {\n  const controllers = {\n    progress,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  // const schemas = require('./config/validation/schemas.js')(app);\n  // socketio\n  const socketioProgress = require('./config/socketio/progress.js')(app);\n  const meta = {\n    base: {\n      atoms: {},\n    },\n    validation: {\n      validators: {},\n      keywords: {},\n      schemas: {},\n    },\n    socketio: {\n      messages: {\n        progress: socketioProgress,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const models = {};\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // progress\n    {\n      method: 'post',\n      path: 'progress/check',\n      controller: 'progress',\n      meta: {\n        auth: { user: true },\n        right: { enableAuthOpen: true },\n      },\n    },\n    {\n      method: 'post',\n      path: 'progress/abort',\n      controller: 'progress',\n      meta: {\n        auth: { user: true },\n        right: { enableAuthOpen: true },\n      },\n    },\n    {\n      method: 'post',\n      path: 'progress/delete',\n      controller: 'progress',\n      meta: {\n        auth: { user: true },\n        right: { enableAuthOpen: true },\n      },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class Progress extends app.Service {\n    async check({ progressId, counter, user }) {\n      return await this.ctx.bean.progress.check({ progressId, counter, user });\n    }\n\n    async abort({ progressId, user }) {\n      return await this.ctx.bean.progress.abort({ progressId, user });\n    }\n\n    async delete({ progressId, user }) {\n      return await this.ctx.bean.progress.delete({ progressId, user });\n    }\n  }\n\n  return Progress;\n};\n","const progress = require('./service/progress.js');\n\nmodule.exports = app => {\n  const services = {\n    progress,\n  };\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}