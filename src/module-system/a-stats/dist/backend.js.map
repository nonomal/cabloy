{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA,4BAA4B,2CAA2C;AACvE,OAAO;AACP;;AAEA,wBAAwB,6BAA6B;AACrD;AACA;AACA,gCAAgC,0CAA0C;AAC1E;;AAEA,mBAAmB,oCAAoC;AACvD,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,6BAA6B;AACvD;AACA,uCAAuC,6BAA6B;AACpE;AACA,sCAAsC,6BAA6B;AACnE;;AAEA,gCAAgC,6BAA6B;AAC7D,iDAAiD,cAAc;AAC/D,2CAA2C,eAAe;AAC1D;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,+BAA+B,6BAA6B;AAC5D,yBAAyB,OAAO,GAAG,KAAK;AACxC;AACA;AACA;AACA;AACA,sDAAsD,kCAAkC;AACxF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,gBAAgB,6BAA6B;AAC7C;AACA,iDAAiD,cAAc;AAC/D,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,eAAe;AAClC,0BAA0B,KAAK,GAAG,QAAQ;AAC1C;;AAEA,iBAAiB,wBAAwB;AACzC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,qCAAqC;AACtD,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,kCAAkC,OAAO,GAAG,SAAS;AACrD;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA,yBAAyB,cAAc;AACvC;AACA,yBAAyB,OAAO,GAAG,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yBAAyB,GAAG,IAAI;AAC7D;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,SAAS,SAAS;AACzE,YAAY;AACZ,8BAA8B,4CAA4C,SAAS,cAAc;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yBAAyB,GAAG,IAAI;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB,GAAG,KAAK;AACnD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB,GAAG,KAAK;AACnD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC/PA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,mBAAmB,mBAAO,CAAC,EAAuB;AAClD,kBAAkB,mBAAO,CAAC,GAAsB;AAChD,uBAAuB,mBAAO,CAAC,GAA4B;AAC3D,kBAAkB,mBAAO,CAAC,GAAsB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;ACZA;AACA;;;;;;;;ACDA;;;;;;;;ACAA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA,gEAAgE,cAAc;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACnBA,cAAc,mBAAO,CAAC,GAAuB;;AAE7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,iBAAiB,mBAAO,CAAC,GAAa;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA,mBAAmB,4BAA4B,wBAAwB;AACvE;AACA;AACA;AACA;;;;;;;;ACPA,cAAc,mBAAO,CAAC,GAAkB;;AAExC;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA,oBAAoB,wDAAwD;AAC5E;AACA;;;;;;;;ACHA;AACA;AACA,gBAAgB,6BAA6B;AAC7C,6CAA6C,6BAA6B;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACRA,cAAc,mBAAO,CAAC,GAAoB;AAC1C;AACA;AACA;;;;;;;UCHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-stats/./backend/src/bean/bean.stats.js","webpack://egg-born-module-a-stats/./backend/src/bean/io.message.stats.js","webpack://egg-born-module-a-stats/./backend/src/bean/queue.stats.js","webpack://egg-born-module-a-stats/./backend/src/bean/stats.deps.js","webpack://egg-born-module-a-stats/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-stats/./backend/src/beans.js","webpack://egg-born-module-a-stats/./backend/src/config/config.js","webpack://egg-born-module-a-stats/./backend/src/config/errors.js","webpack://egg-born-module-a-stats/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-stats/./backend/src/config/locales.js","webpack://egg-born-module-a-stats/./backend/src/config/socketio/stats.js","webpack://egg-born-module-a-stats/./backend/src/controller/stats.js","webpack://egg-born-module-a-stats/./backend/src/controllers.js","webpack://egg-born-module-a-stats/./backend/src/main.js","webpack://egg-born-module-a-stats/./backend/src/meta.js","webpack://egg-born-module-a-stats/./backend/src/model/stats.js","webpack://egg-born-module-a-stats/./backend/src/models.js","webpack://egg-born-module-a-stats/./backend/src/routes.js","webpack://egg-born-module-a-stats/./backend/src/service/stats.js","webpack://egg-born-module-a-stats/./backend/src/services.js","webpack://egg-born-module-a-stats/webpack/bootstrap","webpack://egg-born-module-a-stats/webpack/before-startup","webpack://egg-born-module-a-stats/webpack/startup","webpack://egg-born-module-a-stats/webpack/after-startup"],"sourcesContent":["let __stats;\nlet __statsDeps;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'stats');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get modelStats() {\n      return ctx.model.module(moduleInfo.relativeName).stats;\n    }\n\n    notify({ module, name, nameSub, user }) {\n      module = module || this.moduleName;\n      user = user || (ctx.state.user && ctx.state.user.op);\n      ctx.tail(() => {\n        this._notify_tail({ module, name, nameSub, user, async: false });\n      });\n    }\n\n    async notifyAsync({ module, name, nameSub, user }) {\n      module = module || this.moduleName;\n      user = user || (ctx.state.user && ctx.state.user.op);\n      await this._notify_tail({ module, name, nameSub, user, async: true });\n    }\n\n    _notify_tail({ module, name, nameSub, user, async }) {\n      const provider = this._findStatsProvider({ module, name });\n      if (provider.user && !user) return;\n      // queue\n      const method = async ? 'queuePushAsync' : 'queuePush';\n      return ctx.meta.util[method]({\n        module: moduleInfo.relativeName,\n        queueName: 'stats',\n        queueNameSub: provider.user ? 'user' : 'instance',\n        data: {\n          module,\n          name,\n          nameSub,\n          user,\n        },\n      });\n    }\n\n    async _notify_queue({ module, name, nameSub, user }) {\n      // loop names\n      await this._notify_queue_names({ module, name, nameSub, user });\n      // deps\n      await this._notify_queue_deps({ module, name, nameSub, user });\n    }\n\n    async _notify_queue_names({ module, name, nameSub, user }) {\n      const provider = this._findStatsProvider({ module, name });\n      const fullName = this._getFullName({ name, nameSub });\n      const names = fullName.split('.');\n      for (let i = 0; i < names.length; i++) {\n        const keys = names.slice(0, names.length - i);\n        const fullNameSub = keys.join('.');\n        // execute\n        const value = await ctx.bean._getBean(provider.beanFullName).execute({\n          keys,\n          provider,\n          user,\n        });\n        // set\n        await this._set({\n          module,\n          name,\n          fullName: fullNameSub,\n          value,\n          user: provider.user ? user : null,\n        });\n      }\n    }\n\n    async _notify_queue_deps({ module, name, nameSub, user }) {\n      const fullKey = `${module}:${name}`;\n      const deps = __statsDeps[fullKey];\n      if (!deps || deps.length === 0) return;\n      for (const dep of deps) {\n        const [depModule, depName] = dep.split(':');\n        const providerDep = this._findStatsProvider({ module: depModule, name: depName });\n        await this._notify_queue({\n          module: depModule,\n          name: depName,\n          nameSub: providerDep.inheritNameSub ? nameSub : undefined,\n          user,\n        });\n      }\n    }\n\n    async get({ module, name, nameSub, user }) {\n      module = module || this.moduleName;\n      const provider = this._findStatsProvider({ module, name });\n      const fullName = this._getFullName({ name, nameSub });\n      return await this._get({\n        module,\n        fullName,\n        user: provider.user ? user : null,\n      });\n    }\n\n    _getFullName({ name, nameSub }) {\n      return nameSub ? `${name}.${nameSub}` : name;\n    }\n\n    async _get({ module, fullName, user }) {\n      const where = { module, name: fullName };\n      if (user) {\n        where.userId = user.id;\n      }\n      const item = await this.modelStats.get(where);\n      return item ? JSON.parse(item.value) : undefined;\n    }\n\n    async _set({ module, name, fullName, value, user }) {\n      const where = { module, name: fullName };\n      if (user) {\n        where.userId = user.id;\n      }\n      const item = await this.modelStats.get(where);\n      if (item) {\n        await this.modelStats.update({\n          id: item.id,\n          value: JSON.stringify(value),\n        });\n      } else {\n        const data = { module, name: fullName, value: JSON.stringify(value) };\n        if (user) {\n          data.userId = user.id;\n        }\n        await this.modelStats.insert(data);\n      }\n      // push\n      if (user) {\n        const message = {\n          userIdTo: user.id,\n          content: {\n            module,\n            name,\n            fullName,\n            value,\n          },\n        };\n        await ctx.bean.io.publish({\n          path: `/a/stats/stats/${module}/${fullName}`,\n          message,\n          messageClass: {\n            module: 'a-stats',\n            messageClassName: 'stats',\n          },\n        });\n      }\n    }\n\n    _findStatsProvider({ module, name }) {\n      module = module || this.moduleName;\n      const fullKey = `${module}:${name}`;\n      if (!__stats) {\n        __statsDeps = {};\n        __stats = this._collectStats();\n        this._collectStatsDependents();\n      }\n      const provider = __stats[fullKey];\n      if (!provider) throw new Error(`stats provider not found: ${fullKey}`);\n      return provider;\n    }\n\n    _collectStats() {\n      const stats = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const providers = module.main.meta && module.main.meta.stats && module.main.meta.stats.providers;\n        if (!providers) continue;\n        for (const key in providers) {\n          const provider = providers[key];\n          const fullKey = `${module.info.relativeName}:${key}`;\n          // bean\n          const beanName = provider.bean;\n          let beanFullName;\n          if (typeof beanName === 'string') {\n            beanFullName = `${module.info.relativeName}.stats.${beanName}`;\n          } else {\n            beanFullName = `${beanName.module || module.info.relativeName}.stats.${beanName.name}`;\n          }\n          // dependencies\n          const dependencies = this._parseDependencies(fullKey, module, provider.dependencies);\n          // ok\n          stats[fullKey] = {\n            ...provider,\n            key,\n            fullKey,\n            beanFullName,\n            dependencies,\n          };\n        }\n      }\n      return stats;\n    }\n\n    _collectStatsDependents() {\n      for (const module of ctx.app.meta.modulesArray) {\n        const providers = module.main.meta && module.main.meta.stats && module.main.meta.stats.providers;\n        if (!providers) continue;\n        for (const key in providers) {\n          const provider = providers[key];\n          const fullKey = `${module.info.relativeName}:${key}`;\n          this._parseDependents(fullKey, module, provider.dependents);\n        }\n      }\n    }\n\n    _parseDependencies(fullKey, module, dependencies) {\n      if (!dependencies) return null;\n      if (!Array.isArray(dependencies)) {\n        dependencies = dependencies.split(',');\n      }\n      dependencies = dependencies.map(item => {\n        if (item.indexOf(':') > -1) return item;\n        return `${module.info.relativeName}:${item}`;\n      });\n      for (const dep of dependencies) {\n        if (!__statsDeps[dep]) __statsDeps[dep] = [];\n        __statsDeps[dep].push(fullKey);\n      }\n      return dependencies;\n    }\n\n    _parseDependents(fullKey, module, dependents) {\n      if (!dependents) return;\n      if (!Array.isArray(dependents)) {\n        dependents = dependents.split(',');\n      }\n      dependents = dependents.map(item => {\n        if (item.indexOf(':') > -1) return item;\n        return `${module.info.relativeName}:${item}`;\n      });\n      for (const dep of dependents) {\n        // deps\n        if (!__statsDeps[fullKey]) __statsDeps[fullKey] = [];\n        if (__statsDeps[fullKey].indexOf(dep) === -1) {\n          __statsDeps[fullKey].push(dep);\n        }\n        // stats\n        if (!__stats[dep].dependencies) __stats[dep].dependencies = [];\n        if (__stats[dep].dependencies.indexOf(fullKey) === -1) {\n          __stats[dep].dependencies.push(fullKey);\n        }\n      }\n    }\n  }\n\n  return Stats;\n};\n","module.exports = ctx => {\n  class IOMessage extends ctx.app.meta.IOMessageBase(ctx) {}\n  return IOMessage;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n    async execute(context) {\n      const data = context.data;\n      return await this.ctx.bean.stats._notify_queue(data);\n    }\n  }\n\n  return Queue;\n};\n","module.exports = ctx => {\n  class Stats {\n    async execute(context) {\n      const { keys, provider, user } = context;\n      const dependencies = provider.dependencies;\n      let count = 0;\n      for (const dep of dependencies) {\n        const [module, name] = dep.split(':');\n        const _keys = keys.slice(0);\n        _keys.splice(0, 1, name);\n        const fullName = _keys.join('.');\n        const value = await ctx.bean.stats._get({\n          module,\n          fullName,\n          user,\n        });\n        if (value) {\n          count += value;\n        }\n      }\n      return count;\n    }\n  }\n\n  return Stats;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aStats\n        const sql = `\n          CREATE TABLE aStats (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            value json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst queueStats = require('./bean/queue.stats.js');\nconst beanStats = require('./bean/bean.stats.js');\nconst ioMessageStats = require('./bean/io.message.stats.js');\nconst statsDeps = require('./bean/stats.deps.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // queue\n    'queue.stats': {\n      mode: 'app',\n      bean: queueStats,\n    },\n    // io\n    'io.message.stats': {\n      mode: 'ctx',\n      bean: ioMessageStats,\n    },\n    // global\n    stats: {\n      mode: 'ctx',\n      bean: beanStats,\n      global: true,\n    },\n    // stats\n    'stats.deps': {\n      mode: 'ctx',\n      bean: statsDeps,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // queues\n  config.queues = {\n    stats: {\n      bean: 'stats',\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const stats = {\n    info: {\n      bean: 'stats',\n      title: 'Stats',\n      persistence: false,\n    },\n  };\n  return stats;\n};\n","module.exports = app => {\n  class StatsController extends app.Controller {\n    async get() {\n      const { module, name, nameSub } = this.ctx.request.body;\n      // only support user stats\n      const provider = this.ctx.bean.stats._findStatsProvider({ module, name });\n      if (!provider.user) this.ctx.throw(403);\n      // get\n      const res = await this.service.stats.get({\n        module,\n        name,\n        nameSub,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return StatsController;\n};\n","const stats = require('./controller/stats.js');\n\nmodule.exports = app => {\n  const controllers = {\n    stats,\n  };\n  return controllers;\n};\n","const services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // models\n  const models = require('./models.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  const socketioStats = require('./config/socketio/stats.js')(app);\n  const meta = {\n    socketio: {\n      messages: {\n        stats: socketioStats,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Stats extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aStats', options: { disableDeleted: true } });\n    }\n  }\n  return Stats;\n};\n","const stats = require('./model/stats.js');\n\nmodule.exports = app => {\n  const models = {\n    stats,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [{ method: 'post', path: 'stats/get', controller: 'stats' }];\n  return routes;\n};\n","module.exports = app => {\n  class Stats extends app.Service {\n    async get({ module, name, nameSub, user }) {\n      return await this.ctx.bean.stats.get({ module, name, nameSub, user });\n    }\n  }\n\n  return Stats;\n};\n","const stats = require('./service/stats.js');\nmodule.exports = {\n  stats,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}