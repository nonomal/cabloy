{"version":3,"file":"backend.js","mappings":";;;;;;AAAA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA,cAAc,mBAAO,CAAC,GAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,yFAAyF,UAAU;AACnG,oCAAoC;AACpC;;AAEA;AACA,mCAAmC,4BAA4B;AAC/D;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D,wCAAwC,gDAAgD;AACxF;AACA,eAAe;AACf;;AAEA;AACA,oCAAoC,gDAAgD;AACpF;AACA,gDAAgD,mBAAmB;AACnE;AACA,sCAAsC,yBAAyB;AAC/D,wCAAwC,gDAAgD;AACxF;AACA,eAAe;AACf;;AAEA;AACA,gCAAgC,oBAAoB;AACpD,sCAAsC,yBAAyB;AAC/D;AACA;;AAEA;AACA,mBAAmB,mCAAmC;AACtD;AACA,sCAAsC,yBAAyB;AAC/D;AACA,gEAAgE,oBAAoB;AACpF;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kDAAkD;AACrE;AACA,sCAAsC,yBAAyB;AAC/D;AACA,gEAAgE,oBAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB,oBAAoB,cAAc;AACpF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,YAAY;AACxC,QAAQ;AACR;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kDAAkD;AACtF,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC,0CAA0C,SAAS;AACnD,KAAK;AACL;AACA;AACA;;;;;;;;AC9DA,gCAAgC,mBAAO,CAAC,EAAoC;AAC5E,oBAAoB,mBAAO,CAAC,GAAwB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AClBA;AACA,gBAAgB,yBAAyB;AACzC,sBAAsB,4BAA4B,GAAG,mBAAmB;AACxE,GAAG;AACH;;;;;;;;ACJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;AChCA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;;;;;;;;ACFA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACtBA,gBAAgB,mBAAO,CAAC,GAAyB;;AAEjD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA,eAAe;AACf,KAAK;AACL;AACA,oBAAoB;AACpB,kBAAkB;AAClB,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA,MAAM,+EAA+E;AACrF,MAAM,gFAAgF;AACtF;AACA;AACA;;;;;;;;ACPA;AACA;AACA,mCAAmC,4BAA4B;AAC/D,kEAAkE,4BAA4B;AAC9F;;AAEA,oCAAoC,gDAAgD;AACpF,mEAAmE,gDAAgD;AACnH;AACA;;AAEA;AACA;;;;;;;;ACZA,gBAAgB,mBAAO,CAAC,EAAsB;;AAE9C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-captcha/./backend/src/bean/bean.captcha.js","webpack://egg-born-module-a-captcha/./backend/src/bean/middleware.captchaVerify.js","webpack://egg-born-module-a-captcha/./backend/src/beans.js","webpack://egg-born-module-a-captcha/./backend/src/common/utils.js","webpack://egg-born-module-a-captcha/./backend/src/config/config.js","webpack://egg-born-module-a-captcha/./backend/src/config/errors.js","webpack://egg-born-module-a-captcha/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-captcha/./backend/src/config/locales.js","webpack://egg-born-module-a-captcha/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-captcha/./backend/src/controller/captcha.js","webpack://egg-born-module-a-captcha/./backend/src/controllers.js","webpack://egg-born-module-a-captcha/./backend/src/main.js","webpack://egg-born-module-a-captcha/./backend/src/meta.js","webpack://egg-born-module-a-captcha/./backend/src/models.js","webpack://egg-born-module-a-captcha/./backend/src/routes.js","webpack://egg-born-module-a-captcha/./backend/src/service/captcha.js","webpack://egg-born-module-a-captcha/./backend/src/services.js","webpack://egg-born-module-a-captcha/external commonjs2 \"require3\"","webpack://egg-born-module-a-captcha/webpack/bootstrap","webpack://egg-born-module-a-captcha/webpack/before-startup","webpack://egg-born-module-a-captcha/webpack/startup","webpack://egg-born-module-a-captcha/webpack/after-startup"],"sourcesContent":["const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\nconst utils = require('../common/utils.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Captcha extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'captcha');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    get cacheModule() {\n      return ctx.cache.db.module(moduleInfo.relativeName);\n    }\n\n    async getProvider({ module, sceneName }) {\n      // default scene\n      const sceneDefault = this.configModule.captcha.scenes.default;\n      // module scene\n      const configModuleScene = ctx.config.module(module);\n      const sceneModule = ctx.bean.util.getProperty(configModuleScene, `captcha.scenes.${sceneName}`) || null;\n      return ctx.bean.util.extend({}, sceneDefault, sceneModule);\n    }\n\n    // create provider instance\n    async createProviderInstance({ module, sceneName, context }) {\n      // provider\n      const provider = await this.getProvider({ module, sceneName });\n      // instance id\n      const providerInstanceId = ctx.bean.util.uuidv4();\n      // cache\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      await this.cacheModule.set(key, { providerInstanceId, module, sceneName, context }, provider.timeout);\n      // ok\n      return { providerInstanceId, provider };\n    }\n\n    // refresh provider instance\n    async refreshProviderInstance({ providerInstanceId, module, sceneName, context }) {\n      // provider\n      const provider = await this.getProvider({ module, sceneName });\n      // cache\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      await this.cacheModule.set(key, { providerInstanceId, module, sceneName, context }, provider.timeout);\n      // ok\n      return { providerInstanceId, provider };\n    }\n\n    // get\n    async getProviderInstance({ providerInstanceId }) {\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      return await this.cacheModule.get(key);\n    }\n\n    // update\n    async update({ providerInstanceId, data, context }) {\n      // key\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      // get\n      const providerInstance = await this.getProviderInstance({ providerInstanceId });\n      if (!providerInstance) ctx.throw(403);\n      // provider\n      const provider = await this.getProvider({\n        module: providerInstance.module,\n        sceneName: providerInstance.sceneName,\n      });\n      // update\n      providerInstance.data = data;\n      providerInstance.context = context;\n      await this.cacheModule.set(key, providerInstance, provider.timeout);\n    }\n\n    async verify({ module, sceneName, providerInstanceId, dataInput }) {\n      // key\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      // get\n      const providerInstance = await this.getProviderInstance({ providerInstanceId });\n      if (!providerInstance) ctx.throw(403);\n      // check if the same scene\n      if (module !== providerInstance.module || sceneName !== providerInstance.sceneName) ctx.throw(403);\n      // provider\n      const provider = await this.getProvider({\n        module: providerInstance.module,\n        sceneName: providerInstance.sceneName,\n      });\n      // invoke provider verify\n      const _moduleInfo = mparse.parseInfo(provider.module);\n      await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName: `${_moduleInfo.relativeName}.captcha.provider.${provider.name}`,\n        context: {\n          providerInstanceId,\n          context: providerInstance.context,\n          data: providerInstance.data,\n          dataInput,\n        },\n        fn: 'verify',\n      });\n      // // clear\n      // await cache.remove(key);\n      // should hold the cache item\n      // update\n      providerInstance.data = null;\n      await this.cacheModule.set(key, providerInstance, provider.timeout);\n    }\n  }\n  return Captcha;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Middleware {\n    async execute(options, next) {\n      // must exists\n      const scene = options.scene;\n      const scenes = options.scenes;\n      if (!scene && !scenes) ctx.throw.module(moduleInfo.relativeName, 1001);\n\n      // local.disabled\n      if (ctx.app.meta.isLocal && ctx.config.module(moduleInfo.relativeName).configFront.local.disabled) {\n        // next\n        return await next();\n      }\n\n      // scene\n      if (scene) {\n        await sceneVerify({ ctx, scene });\n      } else if (scenes) {\n        for (const scene of scenes) {\n          await sceneVerify({ ctx, scene });\n        }\n      }\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n\nasync function sceneVerify({ ctx, scene }) {\n  // params\n  const module = scene.module || ctx.module.info.relativeName;\n  const sceneName = scene.name;\n  const captchaData = ctx.request.body[scene.dataKey || 'captcha'];\n  const providerInstanceId = captchaData.providerInstanceId;\n  const dataInput = captchaData.data;\n  // verify\n  try {\n    await ctx.bean.captcha.verify({ module, sceneName, providerInstanceId, dataInput });\n  } catch (err) {\n    throw combineCaptchaError({\n      fieldKey: scene.fieldKey || 'token',\n      message: err.message,\n    });\n  }\n}\n\nfunction combineCaptchaError({ fieldKey, message }) {\n  // error\n  const error = new Error();\n  error.code = 422;\n  error.message = [\n    {\n      keyword: 'x-captcha',\n      params: [],\n      message,\n      dataPath: `/captcha/${fieldKey}`,\n      schemaPath: `#/properties/captcha/${fieldKey}/x-captcha`,\n    },\n  ];\n  return error;\n}\n","const middlewareCaptchaVerify = require('./bean/middleware.captchaVerify.js');\nconst beanCaptcha = require('./bean/bean.captcha.js');\n\nmodule.exports = app => {\n  const beans = {\n    // middleware\n    'middleware.captchaVerify': {\n      mode: 'ctx',\n      bean: middlewareCaptchaVerify,\n    },\n    // global\n    captcha: {\n      mode: 'ctx',\n      bean: beanCaptcha,\n      global: true,\n    },\n  };\n  return beans;\n};\n","module.exports = {\n  getCacheKey({ ctx, providerInstanceId }) {\n    return `captcha:${ctx.bean.user.anonymousId()}:${providerInstanceId}`;\n  },\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    captchaVerify: {\n      bean: 'captchaVerify',\n      global: false,\n      dependencies: 'auth',\n    },\n  };\n\n  // captcha scenes\n  config.captcha = {\n    scenes: {\n      default: {\n        module: 'a-captchasimple',\n        name: 'captcha',\n        timeout: 20 * 60 * 1000,\n      },\n    },\n  };\n\n  // configFront\n  config.configFront = {\n    local: {\n      disabled: false,\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Scene Not Specified',\n};\n","module.exports = {\n  'Scene Not Specified': '场景未指定',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n  class CaptchaController extends app.Controller {\n    async createProviderInstance() {\n      const res = await this.service.captcha.createProviderInstance({\n        module: this.ctx.request.body.module,\n        sceneName: this.ctx.request.body.sceneName,\n        context: this.ctx.request.body.context,\n      });\n      this.ctx.success(res);\n    }\n\n    async refreshProviderInstance() {\n      const res = await this.service.captcha.refreshProviderInstance({\n        providerInstanceId: this.ctx.request.body.providerInstanceId,\n        module: this.ctx.request.body.module,\n        sceneName: this.ctx.request.body.sceneName,\n        context: this.ctx.request.body.context,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return CaptchaController;\n};\n","const captcha = require('./controller/captcha.js');\n\nmodule.exports = app => {\n  const controllers = {\n    captcha,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {},\n    },\n    validation: {\n      validators: {},\n      keywords: {},\n      schemas: {},\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const models = {};\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // captcha\n    { method: 'post', path: 'captcha/createProviderInstance', controller: 'captcha' },\n    { method: 'post', path: 'captcha/refreshProviderInstance', controller: 'captcha' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class Captcha extends app.Service {\n    async createProviderInstance({ module, sceneName, context }) {\n      return await this.ctx.bean.captcha.createProviderInstance({ module, sceneName, context });\n    }\n\n    async refreshProviderInstance({ providerInstanceId, module, sceneName, context }) {\n      return await this.ctx.bean.captcha.refreshProviderInstance({ providerInstanceId, module, sceneName, context });\n    }\n  }\n\n  return Captcha;\n};\n","const captcha = require('./service/captcha.js');\n\nmodule.exports = app => {\n  const services = {\n    captcha,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}