{"version":3,"file":"backend.js","mappings":";;;;;;AAAA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;;AAEA,uBAAuB;;AAEvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,uCAAuC,eAAe;AACtD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;;AAEA,iBAAiB,WAAW;AAC5B;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB,oBAAoB,UAAU;AAC3E;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,cAAc;AACxC;AACA;AACA,+CAA+C,8BAA8B;AAC7E;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC,uDAAuD,6BAA6B;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,WAAW;AAClC;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,oEAAoE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA,+DAA+D,iCAAiC;AAChG;AACA;AACA;AACA,2EAA2E,UAAU;AACrF;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;;AAEA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kDAAkD;AACrF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iDAAiD,qCAAqC;AACtF,OAAO;AACP;;AAEA;AACA;AACA,qDAAqD,0BAA0B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,4DAA4D;AAC5G,qDAAqD,cAAc,cAAc,4BAA4B;AAC7G,mCAAmC,+BAA+B;AAClE;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;ACdA;AACA;AACA;AACA,gDAAgD,+BAA+B;AAC/E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AChDA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,4BAA4B,mBAAO,CAAC,GAAgC;AACpE,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D,2BAA2B,mBAAO,CAAC,GAA+B;AAClE,2BAA2B,mBAAO,CAAC,GAA+B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;AC5BA;AACA;;;;;;;;ACDA;AACA;AACA;;;;;;;;ACFA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC,iCAAiC,iBAAiB;AAClD,aAAa;AACb;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA,iBAAiB,mBAAO,CAAC,GAA0B;;AAEnD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,GAAa;AACpC,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA,mBAAmB,+BAA+B,gDAAgD;AAClG;AACA;AACA;AACA;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,GAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS,4DAA4D;AACjF,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC,eAAe,0DAA0D;AACzE,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,YAAY,SAAS,4DAA4D;AACjF,GAAG;AACH;AACA;AACA;AACA;AACA,YAAY,SAAS,4DAA4D;AACjF,GAAG;AACH;;;;;;;;AC9BA;;AAEA;AACA;AACA;AACA,iDAAiD,0BAA0B;AAC3E;;AAEA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,sDAAsD;AACtD;AACA,eAAe;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3CA,iBAAiB,mBAAO,CAAC,GAAuB;;AAEhD;AACA;AACA;;;;;;;;;ACJA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-instance/./backend/src/bean/bean.instance.js","webpack://egg-born-module-a-instance/./backend/src/bean/broadcast.reload.js","webpack://egg-born-module-a-instance/./backend/src/bean/broadcast.resetCache.js","webpack://egg-born-module-a-instance/./backend/src/bean/middleware.appReady.js","webpack://egg-born-module-a-instance/./backend/src/bean/middleware.instance.js","webpack://egg-born-module-a-instance/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-instance/./backend/src/beans.js","webpack://egg-born-module-a-instance/./backend/src/config/config.js","webpack://egg-born-module-a-instance/./backend/src/config/errors.js","webpack://egg-born-module-a-instance/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-instance/./backend/src/config/locales.js","webpack://egg-born-module-a-instance/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-instance/./backend/src/controller/instance.js","webpack://egg-born-module-a-instance/./backend/src/controllers.js","webpack://egg-born-module-a-instance/./backend/src/main.js","webpack://egg-born-module-a-instance/./backend/src/meta.js","webpack://egg-born-module-a-instance/./backend/src/model/instance.js","webpack://egg-born-module-a-instance/./backend/src/models.js","webpack://egg-born-module-a-instance/./backend/src/routes.js","webpack://egg-born-module-a-instance/./backend/src/service/instance.js","webpack://egg-born-module-a-instance/./backend/src/services.js","webpack://egg-born-module-a-instance/external commonjs2 \"require3\"","webpack://egg-born-module-a-instance/webpack/bootstrap","webpack://egg-born-module-a-instance/webpack/before-startup","webpack://egg-born-module-a-instance/webpack/startup","webpack://egg-born-module-a-instance/webpack/after-startup"],"sourcesContent":["const require3 = require('require3');\nconst async = require3('async');\nconst chalk = require3('chalk');\nconst boxen = require3('boxen');\n\nconst boxenOptions = { padding: 1, margin: 1, align: 'center', borderColor: 'yellow', borderStyle: 'round' };\n\nconst __queueInstanceStartup = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Instance {\n    get cacheMem() {\n      return ctx.cache.mem.module(moduleInfo.relativeName);\n    }\n\n    async list(options) {\n      // options\n      if (!options) options = { where: null, orders: null, page: null };\n      const page = ctx.bean.util.page(options.page, false);\n      const orders = options.orders;\n      const where = options.where || { disabled: 0 }; // allow disabled=undefined\n      // select\n      const _options = { where, orders };\n      if (page.size !== 0) {\n        _options.limit = page.size;\n        _options.offset = page.index;\n      }\n      const modelInstance = ctx.model.module(moduleInfo.relativeName).instance;\n      return await modelInstance.select(_options);\n    }\n\n    async get({ subdomain }) {\n      // cache\n      const instance = this.cacheMem.get('instance');\n      if (instance) return instance;\n      return await this.resetCache({ subdomain });\n    }\n\n    async _get({ subdomain }) {\n      // get\n      const modelInstance = ctx.model.module(moduleInfo.relativeName).instance;\n      const instance = await modelInstance.get({ name: subdomain });\n      if (instance) return instance;\n      // instance base\n      const instanceBase = this._getInstanceBase({ subdomain });\n      if (!instanceBase) return null;\n      // lock\n      return await ctx.meta.util.lock({\n        subdomain: null,\n        resource: `${moduleInfo.relativeName}.registerInstance.${subdomain}`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            subdomain: null,\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'instance',\n            context: { instanceBase },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ instanceBase }) {\n      // get again\n      const modelInstance = ctx.model.module(moduleInfo.relativeName).instance;\n      let instance = await modelInstance.get({ name: instanceBase.subdomain });\n      if (instance) return instance;\n      // insert\n      instance = {\n        name: instanceBase.subdomain,\n        title: instanceBase.title,\n        config: JSON.stringify(instanceBase.config || {}),\n        disabled: 0,\n      };\n      const res = await modelInstance.insert(instance);\n      instance.id = res.insertId;\n      return instance;\n    }\n\n    _getInstanceBase({ subdomain }) {\n      const instances = ctx.app.config.instances || [{ subdomain: '', password: '' }];\n      return instances.find(item => item.subdomain === subdomain);\n    }\n\n    async reload() {\n      // broadcast\n      ctx.meta.util.broadcastEmit({\n        module: 'a-instance',\n        broadcastName: 'reload',\n        data: null,\n      });\n    }\n\n    async instanceChanged(reload = true) {\n      if (reload) {\n        // force to reload instance\n        await this.reload();\n      } else {\n        // broadcast\n        ctx.meta.util.broadcastEmit({\n          module: 'a-instance',\n          broadcastName: 'resetCache',\n          data: null,\n        });\n      }\n    }\n\n    async resetCache({ subdomain }) {\n      // cache\n      const instance = await this._get({ subdomain });\n      if (!instance) return null;\n      // config\n      instance.config = JSON.parse(instance.config) || {};\n      // cache configs\n      const instanceConfigs = ctx.bean.util.extend({}, ctx.app.meta.configs, instance.config);\n      this.cacheMem.set('instanceConfigs', instanceConfigs);\n      // cache configsFront\n      const instanceConfigsFront = this._mergeInstanceConfigFront({ instanceConfigs });\n      this.cacheMem.set('instanceConfigsFront', instanceConfigsFront);\n      // cache instance\n      this.cacheMem.set('instance', instance);\n      return instance;\n    }\n\n    getInstanceConfigs() {\n      return this.cacheMem.get('instanceConfigs');\n    }\n\n    getInstanceConfigsFront() {\n      return this.cacheMem.get('instanceConfigsFront');\n    }\n\n    _mergeInstanceConfigFront({ instanceConfigs }) {\n      const instanceConfigsFront = {};\n      for (const moduleName in instanceConfigs) {\n        const instanceConfig = instanceConfigs[moduleName];\n        if (instanceConfig.configFront) {\n          instanceConfigsFront[moduleName] = instanceConfig.configFront;\n        }\n      }\n      return instanceConfigsFront;\n    }\n\n    async checkAppReady(options) {\n      if (!options) options = { wait: true };\n      if (!ctx.app.meta.appReady && options.wait === false) return false;\n      while (!ctx.app.meta.appReady) {\n        await ctx.bean.util.sleep(300);\n      }\n      return true;\n    }\n\n    async checkAppReadyInstance(options) {\n      if (!options) options = { startup: true };\n      // chech appReady first\n      const appReady = await ctx.bean.instance.checkAppReady({ wait: options.startup !== false });\n      if (!appReady) return false;\n      // check appReady instance\n      const subdomain = ctx.subdomain;\n      if (subdomain === undefined) throw new Error(`subdomain not valid: ${subdomain}`);\n      if (ctx.app.meta.appReadyInstances[subdomain]) return true;\n      // instance startup\n      if (options.startup === false) return false;\n      await this.instanceStartup({ subdomain });\n      return true;\n    }\n\n    // options: force/instanceBase\n    async instanceStartup({ subdomain, options }) {\n      // queue within the same worker\n      if (!__queueInstanceStartup[subdomain]) {\n        __queueInstanceStartup[subdomain] = async.queue((info, cb) => {\n          // check again\n          const force = info.options && info.options.force;\n          if (ctx.app.meta.appReadyInstances[info.subdomain] && !force) {\n            info.resolve();\n            cb();\n            return;\n          }\n          // startup\n          ctx.app.meta\n            ._runStartupInstance({ subdomain: info.subdomain, options: info.options })\n            .then(() => {\n              info.resolve();\n              cb();\n            })\n            .catch(err => {\n              info.reject(err);\n              cb();\n            });\n        });\n      }\n      // promise\n      return new Promise((resolve, reject) => {\n        // options\n        if (!options) options = { force: false, instanceBase: null };\n        // queue push\n        __queueInstanceStartup[subdomain].push({ resolve, reject, subdomain, options });\n      });\n    }\n\n    async initInstance() {\n      // instance\n      const instance = await ctx.bean.instance.get({ subdomain: ctx.subdomain });\n      if (!instance) {\n        // prompt: should for local/prod\n        // if (ctx.app.meta.isLocal) {\n        const urlInfo =\n          ctx.locale === 'zh-cn'\n            ? 'https://cabloy.com/zh-cn/articles/multi-instance.html'\n            : 'https://cabloy.com/articles/multi-instance.html';\n        let message = `Please add instance in ${chalk.keyword('cyan')('src/backend/config/config.[env].js')}`;\n        message += '\\n' + chalk.keyword('orange')(`{ subdomain: '${ctx.subdomain}', password: '', title: '' }`);\n        message += `\\nMore info: ${chalk.keyword('cyan')(urlInfo)}`;\n        console.log('\\n' + boxen(message, boxenOptions));\n        // }\n        return ctx.throw(423); // not ctx.fail(423)\n      }\n      // check if disabled\n      if (instance.disabled) {\n        // locked\n        console.log('instance disabled: ', ctx.subdomain);\n        return ctx.throw(423); // not ctx.fail(423)\n      }\n\n      // check instance startup ready\n      await this.checkAppReadyInstance();\n\n      // try to save host/protocol to config\n      if (ctxHostValid(ctx)) {\n        if (!instance.config['a-base']) instance.config['a-base'] = {};\n        const aBase = instance.config['a-base'];\n        if (aBase.host !== ctx.host || aBase.protocol !== ctx.protocol) {\n          aBase.host = ctx.host;\n          aBase.protocol = ctx.protocol;\n          // update\n          const modelInstance = ctx.model.module(moduleInfo.relativeName).instance;\n          await modelInstance.update({\n            id: instance.id,\n            config: JSON.stringify(instance.config),\n          });\n          // changed\n          await this.instanceChanged(false);\n        }\n      }\n\n      // ok\n      ctx.instance = instance;\n    }\n  }\n  return Instance;\n};\n\nfunction ctxHostValid(ctx) {\n  // not check localhost, because almost inner api call use 127.0.0.1\n  return (\n    !ctx.innerAccess &&\n    ctx.host &&\n    ctx.protocol &&\n    ctx.host.indexOf('127.0.0.1') === -1 &&\n    // ctx.host.indexOf('localhost') === -1 &&\n    ['http', 'https'].includes(ctx.protocol)\n  );\n}\n","module.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n    async execute() {\n      await this.ctx.bean.instance.instanceStartup({\n        subdomain: this.ctx.subdomain,\n        options: {\n          force: true,\n          instanceBase: null,\n        },\n      });\n    }\n  }\n\n  return Broadcast;\n};\n","module.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n    async execute() {\n      await this.ctx.bean.instance.resetCache({ subdomain: this.ctx.subdomain });\n    }\n  }\n\n  return Broadcast;\n};\n","// MaxListenersExceededWarning\n// const eventAppReady = 'eb:event:appReady';\n\n// function checkAppReady(app) {\n//   return new Promise(resolve => {\n//     app.once(eventAppReady, () => {\n//       resolve();\n//     });\n//   });\n// }\n\nmodule.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      // check appReady\n      if (!ctx.innerAccess) {\n        await ctx.bean.instance.checkAppReady();\n      }\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Middleware {\n    async execute(options, next) {\n      // init instance\n      await ctx.bean.instance.initInstance();\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aInstance\n        const sql = `\n          CREATE TABLE aInstance (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            disabled int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.db.query(sql);\n      }\n      if (options.version === 2) {\n        // aInstance\n        const sql = `\n          ALTER TABLE aInstance\n          ADD COLUMN title varchar(255) DEFAULT NULL\n        `;\n        await this.ctx.model.query(sql);\n      }\n      if (options.version === 3) {\n        // aInstance\n        const sql = `\n          ALTER TABLE aInstance\n          ADD COLUMN meta json DEFAULT NULL\n        `;\n        await this.ctx.model.query(sql);\n      }\n      if (options.version === 4) {\n        // aInstance\n        const sql = `\n          ALTER TABLE aInstance\n          CHANGE COLUMN meta config json DEFAULT NULL\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst beanInstance = require('./bean/bean.instance.js');\nconst broadcastResetCache = require('./bean/broadcast.resetCache.js');\nconst broadcastReload = require('./bean/broadcast.reload.js');\nconst middlewareAppReady = require('./bean/middleware.appReady.js');\nconst middlewareInstance = require('./bean/middleware.instance.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // broadcast\n    'broadcast.resetCache': {\n      mode: 'app',\n      bean: broadcastResetCache,\n    },\n    'broadcast.reload': {\n      mode: 'app',\n      bean: broadcastReload,\n    },\n    // middleware\n    'middleware.appReady': {\n      mode: 'ctx',\n      bean: middlewareAppReady,\n    },\n    'middleware.instance': {\n      mode: 'ctx',\n      bean: middlewareInstance,\n    },\n    // global\n    instance: {\n      mode: 'ctx',\n      bean: beanInstance,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    // instance: {\n    //   bean: 'instance',\n    //   global: true,\n    //   dependencies: 'appReady',\n    // },\n    // appReady: {\n    //   bean: 'appReady',\n    //   global: true,\n    // },\n  };\n\n  // broadcasts\n  config.broadcasts = {\n    resetCache: {\n      bean: 'resetCache',\n    },\n    reload: {\n      bean: 'reload',\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  Instance: '实例',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const schemas = {};\n  // instance\n  schemas.instance = {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Subdomain',\n        ebReadOnly: true,\n      },\n      title: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Title',\n      },\n      config: {\n        type: 'string',\n        ebType: 'json',\n        ebTitle: 'Config',\n        ebParams: {\n          target: '',\n          actionSave: true,\n          actionDone: true,\n          actions: [\n            {\n              name: 'preview',\n              actionModule: moduleInfo.relativeName,\n              actionComponent: 'action',\n              icon: { f7: '::preview' },\n              navigateOptions: { target: '_self' },\n            },\n          ],\n        },\n        // notEmpty: true,\n      },\n    },\n  };\n\n  return schemas;\n};\n","module.exports = app => {\n  class InstanceController extends app.Controller {\n    async item() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.instance.item();\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      await this.service.instance.save({\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success();\n    }\n\n    async getConfigsPreview() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.instance.getConfigsPreview();\n      this.ctx.success(res);\n    }\n\n    async reload() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      await this.service.instance.reload();\n      this.ctx.success();\n    }\n  }\n  return InstanceController;\n};\n","const instance = require('./controller/instance.js');\n\nmodule.exports = app => {\n  const controllers = {\n    instance,\n  };\n  return controllers;\n};\n","const routes = require('./routes.js');\nconst services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    config,\n    locales,\n    errors,\n    models,\n    meta,\n  };\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    validation: {\n      validators: {\n        instance: {\n          schemas: 'instance',\n        },\n      },\n      keywords: {},\n      schemas: {\n        instance: schemas.instance,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'instance/config',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Instance extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aInstance', options: { disableDeleted: false, disableInstance: true } });\n    }\n  }\n  return Instance;\n};\n","const instance = require('./model/instance.js');\n\nmodule.exports = app => {\n  const models = {\n    instance,\n  };\n  return models;\n};\n","module.exports = [\n  // instance\n  {\n    method: 'post',\n    path: 'instance/item',\n    controller: 'instance',\n    meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n  },\n  {\n    method: 'post',\n    path: 'instance/save',\n    controller: 'instance',\n    middlewares: 'validate',\n    meta: {\n      validate: { validator: 'instance' },\n      right: { type: 'resource', module: 'a-settings', name: 'settings' },\n    },\n  },\n  {\n    method: 'post',\n    path: 'instance/getConfigsPreview',\n    controller: 'instance',\n    meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n  },\n  {\n    method: 'post',\n    path: 'instance/reload',\n    controller: 'instance',\n    meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n  },\n];\n","const __blackFields = ['startups', 'queues', 'broadcasts', 'middlewares', 'schedules'];\n\nmodule.exports = app => {\n  class Instance extends app.Service {\n    async item() {\n      return await this.ctx.model.instance.get({ id: this.ctx.instance.id });\n    }\n\n    async save({ data }) {\n      // update\n      await this.ctx.model.instance.update({\n        id: this.ctx.instance.id,\n        title: data.title,\n        config: JSON.stringify(this.__configBlackFields(data.config)),\n      });\n      // changed\n      await this.ctx.bean.instance.instanceChanged();\n    }\n\n    async getConfigsPreview() {\n      const instance = await this.item();\n      let configPreview = this.ctx.bean.util.extend({}, app.meta.configs, JSON.parse(instance.config));\n      configPreview = this.__configBlackFields(configPreview);\n      return { data: configPreview };\n    }\n\n    async reload() {\n      await this.ctx.bean.instance.reload();\n    }\n\n    __configBlackFields(config) {\n      if (typeof config === 'string') config = JSON.parse(config);\n      for (const moduleName in config) {\n        const moduleConfig = config[moduleName];\n        for (const field of __blackFields) {\n          delete moduleConfig[field];\n        }\n      }\n      return config;\n    }\n  }\n\n  return Instance;\n};\n","const instance = require('./service/instance.js');\n\nmodule.exports = {\n  instance,\n};\n","module.exports = require(\"require3\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}