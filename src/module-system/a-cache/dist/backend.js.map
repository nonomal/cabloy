{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,mCAAmC;AAC3D;;AAEA;AACA,oCAAoC,mCAAmC;AACvE;AACA;;AAEA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,yBAAyB,wBAAwB,cAAc,gBAAgB,GAAG,KAAK;AACvF;AACA;AACA;AACA,6BAA6B,KAAK;AAClC,4EAA4E,oCAAoC;AAChH,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,WAAW;AACX,UAAU;AACV;AACA;AACA,+EAA+E,QAAQ;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;ACjGA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA,sEAAsE,cAAc,IAAI,gBAAgB;AACxG;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;;AAEA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;;AAEA;AACA,gBAAgB,mCAAmC,GAAG,gBAAgB,GAAG,KAAK;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjDA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,gBAAgB,mBAAO,CAAC,GAAoB;AAC5C,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,mBAAmB,mBAAO,CAAC,GAAuB;AAClD,0BAA0B,mBAAO,CAAC,GAA8B;AAChE,2BAA2B,mBAAO,CAAC,GAA+B;AAClE,kBAAkB,mBAAO,CAAC,GAAsB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC9CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACpBA;AACA;;;;;;;;ACDA;;;;;;;;ACAA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;;AAEA;AACA;;;;;;;;ACJA,WAAW,mBAAO,CAAC,GAAoB;;AAEvC;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;;AAEA;AACA;;;;;;;;ACJA,WAAW,mBAAO,CAAC,GAAiB;;AAEpC;AACA;AACA;;;;;;;UCJA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-cache/./backend/src/bean/bean.cache.js","webpack://egg-born-module-a-cache/./backend/src/bean/broadcast.memClear.js","webpack://egg-born-module-a-cache/./backend/src/bean/broadcast.memRemove.js","webpack://egg-born-module-a-cache/./backend/src/bean/local.db.js","webpack://egg-born-module-a-cache/./backend/src/bean/local.mem.js","webpack://egg-born-module-a-cache/./backend/src/bean/local.redis.js","webpack://egg-born-module-a-cache/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-cache/./backend/src/beans.js","webpack://egg-born-module-a-cache/./backend/src/config/config.js","webpack://egg-born-module-a-cache/./backend/src/config/errors.js","webpack://egg-born-module-a-cache/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-cache/./backend/src/config/locales.js","webpack://egg-born-module-a-cache/./backend/src/controller/db.js","webpack://egg-born-module-a-cache/./backend/src/controllers.js","webpack://egg-born-module-a-cache/./backend/src/main.js","webpack://egg-born-module-a-cache/./backend/src/routes.js","webpack://egg-born-module-a-cache/./backend/src/service/db.js","webpack://egg-born-module-a-cache/./backend/src/services.js","webpack://egg-born-module-a-cache/webpack/bootstrap","webpack://egg-born-module-a-cache/webpack/before-startup","webpack://egg-born-module-a-cache/webpack/startup","webpack://egg-born-module-a-cache/webpack/after-startup"],"sourcesContent":["module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cache {\n    get db() {\n      const config = ctx.config.module(moduleInfo.relativeName);\n      if (config.db.redis) {\n        return this.redis;\n      }\n      return this._db;\n    }\n\n    get _db() {\n      return ctx.bean._getBean(moduleInfo, 'local.db');\n    }\n\n    get mem() {\n      return ctx.bean._getBean(moduleInfo, 'local.mem');\n    }\n\n    get redis() {\n      return ctx.bean._getBean(moduleInfo, 'local.redis');\n    }\n  }\n\n  return Cache;\n};\n","module.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n    async execute(context) {\n      const sameAsCaller = context.sameAsCaller;\n      const data = context.data;\n      if (!sameAsCaller) {\n        const moduleCache = this.ctx.cache.mem.module(data.moduleName);\n        moduleCache._clear();\n      }\n    }\n  }\n\n  return Broadcast;\n};\n","module.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n    async execute(context) {\n      const sameAsCaller = context.sameAsCaller;\n      const data = context.data;\n      if (!sameAsCaller) {\n        const moduleCache = this.ctx.cache.mem.module(data.moduleName);\n        moduleCache._remove(data.name);\n      }\n    }\n  }\n\n  return Broadcast;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class CacheDb extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, `${moduleInfo.relativeName}.local.db`);\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    async get(name) {\n      const res = await this._has(name);\n      return res ? JSON.parse(res.value) : undefined;\n    }\n\n    async set(name, value, timeout) {\n      await this._set({ name, value, timeout, queue: true });\n    }\n\n    async getset(name, value, timeout) {\n      const res = await this._set({ name, value, timeout, queue: true });\n      return res ? JSON.parse(res.value) : undefined;\n    }\n\n    async _set({ name, value, timeout, queue }) {\n      // second\n      const second = timeout ? parseInt(timeout / 1000) : timeout;\n      // expired\n      const expired = second ? `TIMESTAMPADD(SECOND,${second},CURRENT_TIMESTAMP)` : 'null';\n      const res = await ctx.db.get('aCache', {\n        iid: ctx.instance ? ctx.instance.id : 0,\n        module: this.moduleName,\n        name,\n      });\n      if (res) {\n        await ctx.db.query(\n          `\n          update aCache set value=?, expired=${expired}\n            where id=?\n          `,\n          [JSON.stringify(value), res.id]\n        );\n      } else {\n        if (queue) {\n          await ctx.meta.util.lock({\n            resource: `${moduleInfo.relativeName}.cacheDbSet.${this.moduleName}.${name}`,\n            fn: async () => {\n              return await ctx.meta.util.executeBeanIsolate({\n                beanModule: moduleInfo.relativeName,\n                fn: async ({ ctx }) => {\n                  return await ctx.cache._db.module(this.moduleName)._set({ name, value, timeout, queue: false });\n                },\n              });\n            },\n          });\n        } else {\n          await ctx.db.query(\n            `\n            insert into aCache(iid,module,name,value,expired) values(?,?,?,?,${expired})\n            `,\n            [ctx.instance ? ctx.instance.id : 0, this.moduleName, name, JSON.stringify(value)]\n          );\n        }\n      }\n      // return old value\n      if (!res) return null;\n      if (!res.expired || res.expired.getTime() > new Date().getTime()) return res;\n      return null;\n    }\n\n    async has(name) {\n      const res = await this._has(name);\n      return !!res;\n    }\n\n    async _has(name) {\n      const sql =\n        'select * from aCache where iid=? and module=? and name=? and (expired is null or expired>CURRENT_TIMESTAMP)';\n      const res = await ctx.db.queryOne(sql, [ctx.instance ? ctx.instance.id : 0, this.moduleName, name]);\n      return res;\n    }\n\n    async remove(name) {\n      await ctx.db.delete('aCache', {\n        iid: ctx.instance ? ctx.instance.id : 0,\n        module: this.moduleName,\n        name,\n      });\n    }\n\n    async clear() {\n      await ctx.db.delete('aCache', {\n        iid: ctx.instance ? ctx.instance.id : 0,\n        module: this.moduleName,\n      });\n    }\n  }\n\n  return CacheDb;\n};\n","const CACHEMEMORY = Symbol('APP#__CACHEMEMORY');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class CacheMem extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, `${moduleInfo.relativeName}.local.mem`);\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get memory() {\n      if (!ctx.app[CACHEMEMORY]) {\n        ctx.app[CACHEMEMORY] = {};\n      }\n      return ctx.bean.util.getPropertyObject(ctx.app[CACHEMEMORY], `${ctx.subdomain}&&${this.moduleName}`, '&&');\n    }\n\n    get(name) {\n      const res = this.has(name);\n      return res ? res.value : undefined;\n    }\n\n    set(name, value, timeout) {\n      this.memory[name] = {\n        value,\n        timeout: timeout || 0,\n        timestamp: new Date(),\n      };\n    }\n\n    getset(name, value, timeout) {\n      const valueOld = this.get(name);\n      this.memory[name] = {\n        value,\n        timeout: timeout || 0,\n        timestamp: new Date(),\n      };\n      return valueOld;\n    }\n\n    has(name) {\n      const res = this.memory[name];\n      if (!res) return null;\n      return res.timeout === 0 || new Date() - res.timestamp < res.timeout ? res : null;\n    }\n\n    remove(name) {\n      // remove this\n      this._remove(name);\n      // broadcast\n      ctx.meta.util.broadcastEmit({\n        module: 'a-cache',\n        broadcastName: 'memRemove',\n        data: { moduleName: this.moduleName, name },\n      });\n    }\n\n    // by broadcast\n    _remove(name) {\n      delete this.memory[name];\n    }\n\n    clear() {\n      // clear this\n      this._clear();\n      // broadcast\n      ctx.meta.util.broadcastEmit({\n        module: 'a-cache',\n        broadcastName: 'memClear',\n        data: { moduleName: this.moduleName },\n      });\n    }\n\n    // by broadcast\n    _clear() {\n      if (\n        ctx.app[CACHEMEMORY] &&\n        ctx.app[CACHEMEMORY][ctx.subdomain] &&\n        ctx.app[CACHEMEMORY][ctx.subdomain][this.moduleName]\n      ) {\n        ctx.app[CACHEMEMORY][ctx.subdomain][this.moduleName] = {};\n      }\n    }\n\n    _clearAll() {\n      if (ctx.app[CACHEMEMORY] && ctx.app[CACHEMEMORY][ctx.subdomain]) {\n        const aInstance = ctx.app[CACHEMEMORY][ctx.subdomain]['a-instance'];\n        ctx.app[CACHEMEMORY][ctx.subdomain] = { 'a-instance': aInstance };\n      }\n    }\n  }\n\n  return CacheMem;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class RedisDb extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, `${moduleInfo.relativeName}.local.redis`);\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    _getKey(name) {\n      return `${ctx.instance ? ctx.instance.id : 0}:${this.moduleName}:${name}`;\n    }\n\n    async get(name) {\n      const redis = ctx.app.redis.get('cache');\n      const key = this._getKey(name);\n      const value = await redis.get(key);\n      return value ? JSON.parse(value) : undefined;\n    }\n\n    async set(name, value, timeout) {\n      const redis = ctx.app.redis.get('cache');\n      const key = this._getKey(name);\n      if (timeout) {\n        await redis.set(key, JSON.stringify(value), 'PX', timeout);\n      } else {\n        await redis.set(key, JSON.stringify(value));\n      }\n    }\n\n    async getset(name, value, timeout) {\n      const redis = ctx.app.redis.get('cache');\n      const key = this._getKey(name);\n      let valuePrev;\n      if (timeout) {\n        const res = await redis.multi().get(key).set(key, JSON.stringify(value), 'PX', timeout).exec();\n        valuePrev = res[0][1];\n      } else {\n        const res = await redis.multi().get(key).set(key, JSON.stringify(value)).exec();\n        valuePrev = res[0][1];\n      }\n      return valuePrev ? JSON.parse(valuePrev) : undefined;\n    }\n\n    async has(name) {\n      const redis = ctx.app.redis.get('cache');\n      const key = this._getKey(name);\n      return (await redis.exists(key)) > 0;\n    }\n\n    async remove(name) {\n      const redis = ctx.app.redis.get('cache');\n      const key = this._getKey(name);\n      await redis.del(key);\n    }\n  }\n\n  return RedisDb;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aCache\n        const sql = `\n          CREATE TABLE aCache (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            value json DEFAULT NULL,\n            timeout int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.db.query(sql);\n      }\n\n      if (options.version === 2) {\n        let sql;\n        // delete\n        sql = `\n          delete from aCache\n        `;\n        await this.ctx.db.query(sql);\n        // alter table: aCache\n        sql = `\n          ALTER TABLE aCache\n            DROP COLUMN timeout,\n            ADD COLUMN expired timestamp DEFAULT NULL\n        `;\n        await this.ctx.db.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 0) {\n        // cache reset\n        //   : just clear mem cache\n        await this.ctx.cache.mem._clearAll();\n      }\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localDb = require('./bean/local.db.js');\nconst localMem = require('./bean/local.mem.js');\nconst localRedis = require('./bean/local.redis.js');\nconst broadcastMemClear = require('./bean/broadcast.memClear.js');\nconst broadcastMemRemove = require('./bean/broadcast.memRemove.js');\nconst beanCache = require('./bean/bean.cache.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.db': {\n      mode: 'ctx',\n      bean: localDb,\n    },\n    'local.mem': {\n      mode: 'ctx',\n      bean: localMem,\n    },\n    'local.redis': {\n      mode: 'ctx',\n      bean: localRedis,\n    },\n    // broadcast\n    'broadcast.memClear': {\n      mode: 'app',\n      bean: broadcastMemClear,\n    },\n    // broadcast\n    'broadcast.memRemove': {\n      mode: 'app',\n      bean: broadcastMemRemove,\n    },\n    // global\n    cache: {\n      mode: 'ctx',\n      bean: beanCache,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // broadcasts\n  config.broadcasts = {\n    memRemove: {\n      bean: 'memRemove',\n    },\n    memClear: {\n      bean: 'memClear',\n    },\n  };\n\n  // db\n  config.db = {\n    redis: true,\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  class DbController extends app.Controller {}\n\n  return DbController;\n};\n","const db = require('./controller/db.js');\n\nmodule.exports = app => {\n  const controllers = {\n    db,\n  };\n  return controllers;\n};\n","const services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    config,\n    locales,\n    errors,\n  };\n};\n","module.exports = app => {\n  const routes = [];\n  return routes;\n};\n","module.exports = app => {\n  class Db extends app.Service {}\n\n  return Db;\n};\n","const db = require('./service/db.js');\n\nmodule.exports = {\n  db,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}