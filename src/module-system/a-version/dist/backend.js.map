{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;;AAEA,qBAAqB,IAAI;AACzB,iCAAiC,GAAG;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACxBA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,SAAS;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA;AACA,6BAA6B,2CAA2C;AACxE,8EAA8E,uBAAuB;AACrG,QAAQ;AACR,wEAAwE,uBAAuB;AAC/F;AACA;AACA;;AAEA;AACA,2BAA2B,0BAA0B;AACrD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,+CAA+C,2BAA2B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA,aAAa;AACb,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA,aAAa;AACb,WAAW;AACX;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,yBAAyB;AACzE,0EAA0E,yBAAyB;AACnG,wFAAwF,yBAAyB;AACjH;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,gDAAgD,yBAAyB;AACzE,0EAA0E,yBAAyB;AACnG;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B,SAAS;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,GAAG,mCAAmC;AAC7E,6CAA6C,aAAa;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,8BAA8B;AAC9B,gDAAgD,qBAAqB,SAAS,YAAY;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,8CAA8C,qBAAqB,SAAS,YAAY;AACxF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;;AAEA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACdA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1CA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,2BAA2B,mBAAO,CAAC,GAA+B;AAClE,4BAA4B,mBAAO,CAAC,GAAgC;AACpE,4BAA4B,mBAAO,CAAC,EAAgC;AACpE,4BAA4B,mBAAO,CAAC,GAAgC;AACpE,mBAAmB,mBAAO,CAAC,GAAuB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC7CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;AC/BA;;;;;;;;ACAA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;ACHA,eAAe,mBAAO,CAAC,GAAa;AACpC,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,kBAAkB,mBAAO,CAAC,GAAuB;;AAEjD;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-version/./backend/src/bean/bean.worker.js","webpack://egg-born-module-a-version/./backend/src/bean/local.version.js","webpack://egg-born-module-a-version/./backend/src/bean/startup.databaseInit.js","webpack://egg-born-module-a-version/./backend/src/bean/startup.databaseName.js","webpack://egg-born-module-a-version/./backend/src/bean/startup.instanceInit.js","webpack://egg-born-module-a-version/./backend/src/bean/startup.workerAlive.js","webpack://egg-born-module-a-version/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-version/./backend/src/beans.js","webpack://egg-born-module-a-version/./backend/src/config/config.js","webpack://egg-born-module-a-version/./backend/src/config/constants.js","webpack://egg-born-module-a-version/./backend/src/config/errors.js","webpack://egg-born-module-a-version/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-version/./backend/src/config/locales.js","webpack://egg-born-module-a-version/./backend/src/controllers.js","webpack://egg-born-module-a-version/./backend/src/main.js","webpack://egg-born-module-a-version/./backend/src/routes.js","webpack://egg-born-module-a-version/./backend/src/services.js","webpack://egg-born-module-a-version/external commonjs2 \"require3\"","webpack://egg-born-module-a-version/webpack/bootstrap","webpack://egg-born-module-a-version/webpack/before-startup","webpack://egg-born-module-a-version/webpack/startup","webpack://egg-born-module-a-version/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Worker extends app.meta.BeanBase {\n    get id() {\n      return app.meta.workerId;\n    }\n\n    async setAlive() {\n      const config = app.meta.configs[moduleInfo.relativeName];\n      const aliveTimeout = config.worker.alive.timeout;\n      const key = `workerAlive:${this.id}`;\n      const redis = app.redis.get('cache');\n      await redis.set(key, JSON.stringify(true), 'PX', aliveTimeout * 2);\n    }\n\n    async getAlive({ id }) {\n      const key = `workerAlive:${id}`;\n      const redis = app.redis.get('cache');\n      const value = await redis.get(key);\n      return value ? JSON.parse(value) : undefined;\n    }\n  }\n\n  return Worker;\n};\n","const require3 = require('require3');\nconst moment = require3('moment');\nconst chalk = require3('chalk');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version extends app.meta.BeanBase {\n    async databaseInitStartup() {\n      // database\n      await this.__database();\n      // version start\n      await this.__start();\n    }\n\n    async databaseNameStartup() {\n      // database\n      await this.__database();\n    }\n\n    async instanceInitStartup({ options }) {\n      const instanceBase = options && options.instanceBase;\n      await this.__instanceInit(this.ctx.subdomain, instanceBase);\n    }\n\n    async __start() {\n      // update all modules\n      try {\n        const result = await this.__check({ scene: null });\n        if (Object.keys(result).length > 0) console.log(result);\n        console.log(chalk.cyan('  All modules are checked successfully!'));\n      } catch (err) {\n        console.log(chalk.cyan('  Modules are checked failed!'));\n        throw err;\n      }\n    }\n\n    async __instanceInit(subdomain, instanceBase) {\n      try {\n        if (!instanceBase) {\n          instanceBase = this.ctx.bean.instance._getInstanceBase({ subdomain });\n        }\n        if (!instanceBase) instanceBase = {};\n        await this.__check({ ...instanceBase, scene: 'init', subdomain });\n        console.log(chalk.cyan(`  The instance is initialized successfully: ${subdomain || 'default'}`));\n      } catch (err) {\n        console.log(chalk.cyan(`  The instance is initialized failed: ${subdomain || 'default'}`));\n        throw err;\n      }\n    }\n\n    async __instanceTest(subdomain) {\n      await this.__check({ scene: 'test', subdomain });\n    }\n\n    // scene: null/init/test\n    async __check(options) {\n      options.result = {};\n\n      if (!options.scene) {\n        // confirm table aVersion exists\n        const res = await this.ctx.db.queryOne(\"show tables like 'aVersion'\");\n        if (!res) {\n          await this.ctx.db.query(`\n          CREATE TABLE aVersion (\n            id INT NOT NULL AUTO_INCREMENT,\n            module VARCHAR(50) NULL,\n            version INT NULL,\n            createdAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            PRIMARY KEY (id));\n          `);\n        }\n      }\n\n      // check all modules\n      for (const module of app.meta.modulesArray) {\n        await this.__checkModule(module.info.relativeName, options);\n      }\n\n      // check if role dirty for init/test\n      if (options.scene === 'init' || options.scene === 'test') {\n        await this.ctx.meta.util.executeBean({\n          subdomain: options.subdomain,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.local.version`,\n          fn: '__after',\n        });\n      }\n\n      // ok\n      return options.result;\n    }\n\n    // check module\n    async __checkModule(moduleName, options) {\n      // module\n      const module = this.__getModule(moduleName);\n\n      // fileVersionNew\n      let fileVersionNew = 0;\n      if (module.package.eggBornModule && module.package.eggBornModule.fileVersion) {\n        fileVersionNew = module.package.eggBornModule.fileVersion;\n      }\n\n      if (fileVersionNew && (!options.scene || options.scene === 'init')) {\n        // update module or init module\n\n        // -1: always\n        if (fileVersionNew === -1) {\n          await this.__updateModule(options, module, -1, -1);\n        } else {\n          // fileVersionOld\n          let fileVersionOld = 0; // default\n          if (!options.scene) {\n            const res = await this.ctx.db.queryOne('select * from aVersion where module=? order by version desc', [\n              moduleName,\n            ]);\n            if (res) {\n              fileVersionOld = res.version;\n            }\n          } else {\n            const res = await this.ctx.db.queryOne(\n              'select * from aVersionInit where subdomain=? and module=? order by version desc',\n              [options.subdomain, moduleName]\n            );\n            if (res) {\n              fileVersionOld = res.version;\n            }\n          }\n\n          // check if need update\n          if (fileVersionOld > fileVersionNew) {\n            this.ctx.throw(1001, moduleName);\n          } else {\n            // not check if (fileVersionOld < fileVersionNew)\n            await this.__updateModule(options, module, fileVersionOld, fileVersionNew);\n          }\n        }\n      }\n\n      if (options.scene === 'test') {\n        // test module\n        await this.ctx.meta.util.executeBean({\n          subdomain: options.subdomain,\n          beanModule: module.info.relativeName,\n          transaction: true,\n          fn: async ({ ctx }) => {\n            await this.__testModuleTransaction(ctx, module, fileVersionNew, options);\n          },\n        });\n      }\n    }\n\n    // update module or init module\n    async __updateModule(options, module, fileVersionOld, fileVersionNew) {\n      if (fileVersionNew === -1) {\n        // always\n        await this.__updateModule2(options, module, -1);\n      } else {\n        // versions\n        //   always version:0\n        const versions = [0];\n        for (let version = fileVersionOld + 1; version <= fileVersionNew; version++) {\n          versions.push(version);\n        }\n        // loop\n        for (const version of versions) {\n          await this.__updateModule2(options, module, version);\n        }\n      }\n\n      // log\n      if (fileVersionOld !== fileVersionNew) {\n        options.result[module.info.relativeName] = { fileVersionOld, fileVersionNew };\n      }\n    }\n\n    async __updateModule2(options, module, version) {\n      // perform action\n      try {\n        if (!options.scene) {\n          // update\n          await this.ctx.meta.util.executeBean({\n            beanModule: module.info.relativeName,\n            transaction: true,\n            fn: async ({ ctx }) => {\n              await this.__updateModuleTransaction(ctx, module, version);\n            },\n          });\n        } else {\n          // init\n          await this.ctx.meta.util.executeBean({\n            subdomain: options.subdomain,\n            beanModule: module.info.relativeName,\n            transaction: true,\n            fn: async ({ ctx }) => {\n              await this.__initModuleTransaction(ctx, module, version, options);\n            },\n          });\n        }\n      } catch (err) {\n        throw err;\n      }\n    }\n\n    async __updateModuleTransaction(_ctx, module, version) {\n      // bean\n      const beanVersion = _ctx.bean._getBean(`${module.info.relativeName}.version.manager`);\n      if (!beanVersion) throw new Error(`version.manager not exists for ${module.info.relativeName}`);\n      if (!beanVersion.update) throw new Error(`version.manager.update not exists for ${module.info.relativeName}`);\n      // execute\n      await beanVersion.update({ version });\n      // insert record\n      if (version > 0) {\n        await _ctx.db.insert('aVersion', {\n          module: module.info.relativeName,\n          version,\n        });\n      }\n    }\n\n    async __initModuleTransaction(_ctx, module, version, options) {\n      // bean\n      const beanVersion = _ctx.bean._getBean(`${module.info.relativeName}.version.manager`);\n      if (!beanVersion) throw new Error(`version.manager not exists for ${module.info.relativeName}`);\n      // execute\n      if (beanVersion.init) {\n        await beanVersion.init({ ...options, version });\n      }\n      // insert record\n      if (version > 0) {\n        await _ctx.db.insert('aVersionInit', {\n          subdomain: options.subdomain,\n          module: module.info.relativeName,\n          version,\n        });\n      }\n    }\n\n    // test module\n    async __testModuleTransaction(_ctx, module, version, options) {\n      // bean\n      const beanVersion = _ctx.bean._getBean(`${module.info.relativeName}.version.manager`);\n      // execute\n      if (beanVersion && beanVersion.test) {\n        await beanVersion.test({ ...options, version });\n      }\n    }\n\n    async __after() {\n      await this.ctx.bean.role.build();\n    }\n\n    __getDatabasePrefix() {\n      return `egg-born-test-${app.name}`;\n    }\n\n    async __fetchDatabases() {\n      // db prefix\n      const dbPrefix = this.__getDatabasePrefix();\n      // dbs\n      const mysql = app.mysql.get('__ebdb');\n      let dbs = await mysql.query(`show databases like \\'${dbPrefix}-%\\'`);\n      // map\n      dbs = dbs.map(db => {\n        const name = db[Object.keys(db)[0]];\n        return { name };\n      });\n      // filter\n      dbs = dbs.filter(db => {\n        const _time = db.name.substring(dbPrefix.length);\n        return _time.length === 16;\n      });\n      // ok\n      return dbs;\n    }\n\n    async __createDatabase() {\n      // db prefix\n      const dbPrefix = this.__getDatabasePrefix();\n      // create\n      const mysql = app.mysql.get('__ebdb');\n      const databaseName = `${dbPrefix}-${moment().format('YYYYMMDD-HHmmss')}`;\n      await mysql.query(`CREATE DATABASE \\`${databaseName}\\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci`);\n      return databaseName;\n    }\n\n    async __database() {\n      // dev/debug db\n      if (app.meta.isLocal) {\n        const mysqlConfig = app.config.mysql.clients.__ebdb;\n        if ((mysqlConfig.database === 'sys' || mysqlConfig.database === 'mysql') && !app.mysql.__ebdb_test) {\n          let databaseName;\n          const dbs = await this.__fetchDatabases();\n          if (dbs.length === 0) {\n            databaseName = await this.__createDatabase();\n          } else {\n            const db = dbs[0];\n            databaseName = db.name;\n          }\n          // create test mysql\n          mysqlConfig.database = databaseName;\n          app.mysql.__ebdb_test = mysqlConfig; // database ready\n          this.ctx.db = null; // reset\n          console.log(chalk.cyan(`  database: ${mysqlConfig.database}, pid: ${process.pid}`));\n        }\n      }\n      // test db\n      if (app.meta.isTest && !app.mysql.__ebdb_test) {\n        // drop old databases\n        const mysql = app.mysql.get('__ebdb');\n        const dbs = await this.__fetchDatabases();\n        for (const db of dbs) {\n          const name = db.name;\n          await mysql.query(`drop database \\`${name}\\``);\n        }\n        // create database\n        const databaseName = await this.__createDatabase();\n        // create test mysql\n        const mysqlConfig = app.config.mysql.clients.__ebdb;\n        mysqlConfig.database = databaseName;\n        app.mysql.__ebdb_test = mysqlConfig;\n        this.ctx.db = null; // reset\n        // database ready\n        console.log(chalk.cyan(`  database: ${mysqlConfig.database}, pid: ${process.pid}`));\n      }\n      // default\n      if (!app.mysql.__ebdb_test) {\n        app.mysql.__ebdb_test = app.config.mysql.clients.__ebdb;\n      }\n    }\n\n    // get module\n    __getModule(moduleName) {\n      return app.meta.modules[moduleName];\n    }\n  }\n\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      const beanVersion = this.ctx.bean.local.version;\n      return await beanVersion.databaseInitStartup();\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      const beanVersion = this.ctx.bean.local.version;\n      return await beanVersion.databaseNameStartup();\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Startup extends app.meta.BeanBase {\n    async execute(context) {\n      const options = context.options;\n      const beanVersion = this.ctx.bean.local.version;\n      return await beanVersion.instanceInitStartup({ options });\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      const aliveTimeout = this.ctx.config.worker.alive.timeout;\n      // interval\n      setInterval(async () => {\n        await app.bean.worker.setAlive();\n      }, aliveTimeout);\n      // alive\n      await app.bean.worker.setAlive();\n    }\n  }\n\n  return Startup;\n};\n","const require3 = require('require3');\nconst fse = require3('fs-extra');\n\nmodule.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // do nothing\n      }\n\n      if (options.version === 2) {\n        await this.ctx.db.query(`\n          CREATE TABLE aVersionInit (\n            id INT NOT NULL AUTO_INCREMENT,\n            subdomain VARCHAR(50) NULL,\n            module VARCHAR(50) NULL,\n            version INT NULL,\n            createdAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            PRIMARY KEY (id));\n          `);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // remove publicDir\n        await this._removePublicDir();\n      }\n    }\n\n    async _removePublicDir() {\n      // only for test/local env\n      if (app.meta.isProd) return;\n      // path\n      const publicPath = await this.ctx.bean.base.getPath();\n      // remove\n      await fse.remove(publicPath);\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localVersion = require('./bean/local.version.js');\nconst startupWorkerAlive = require('./bean/startup.workerAlive.js');\nconst startupDatabaseInit = require('./bean/startup.databaseInit.js');\nconst startupDatabaseName = require('./bean/startup.databaseName.js');\nconst startupInstanceInit = require('./bean/startup.instanceInit.js');\nconst beanWorker = require('./bean/bean.worker.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.version': {\n      mode: 'app',\n      bean: localVersion,\n    },\n    // startup\n    'startup.workerAlive': {\n      mode: 'app',\n      bean: startupWorkerAlive,\n    },\n    'startup.databaseInit': {\n      mode: 'app',\n      bean: startupDatabaseInit,\n    },\n    'startup.databaseName': {\n      mode: 'app',\n      bean: startupDatabaseName,\n    },\n    'startup.instanceInit': {\n      mode: 'app',\n      bean: startupInstanceInit,\n    },\n    // global\n    worker: {\n      mode: 'app',\n      bean: beanWorker,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // startups\n  config.startups = {\n    workerAlive: {\n      bean: 'workerAlive',\n    },\n    databaseInit: {\n      bean: 'databaseInit',\n      debounce: true,\n    },\n    databaseName: {\n      bean: 'databaseName',\n    },\n    instanceInit: {\n      bean: 'instanceInit',\n      instance: true,\n      debounce: true,\n    },\n  };\n\n  // worker\n  config.worker = {\n    alive: {\n      timeout: 7000,\n    },\n  };\n\n  return config;\n};\n","module.exports = {};\n","module.exports = {\n  1001: 'Module %s is Old',\n};\n","module.exports = {\n  'Module %s is Old': '模块过旧',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const controllers = {};\n  return controllers;\n};\n","const routes = require('./routes.js');\nconst services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    config,\n    locales,\n    errors,\n    constants,\n  };\n};\n","module.exports = [];\n","module.exports = {};\n","module.exports = require(\"require3\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}