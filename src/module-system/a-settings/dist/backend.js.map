{"version":3,"file":"backend.js","mappings":";;;;;;AAAA,kBAAkB,mBAAO,CAAC,GAAwB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB,cAAc;AAClC,+BAA+B,6BAA6B;AAC5D;;AAEA,wBAAwB,cAAc;AACtC,+BAA+B,iCAAiC;AAChE;;AAEA;;AAEA;AACA;AACA,wCAAwC,mCAAmC;AAC3E;;AAEA;AACA;AACA,kCAAkC,mCAAmC;AACrE;;AAEA,6BAA6B,cAAc;AAC3C,wCAAwC,6BAA6B;AACrE;;AAEA;;AAEA;AACA;AACA,wCAAwC,uCAAuC;AAC/E;;AAEA;AACA;AACA,kCAAkC,uCAAuC;AACzE;;AAEA,iCAAiC,cAAc;AAC/C,wCAAwC,iCAAiC;AACzE;;AAEA;;AAEA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,0CAA0C;AAC1C;;AAEA,0BAA0B,qBAAqB;AAC/C;AACA,6CAA6C,eAAe;AAC5D,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oCAAoC,qBAAqB;AACzD;;AAEA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,qCAAqC,iDAAiD;AACtF;;AAEA,8BAA8B,uCAAuC;AACrE,uCAAuC,2BAA2B;AAClE,qCAAqC,kDAAkD;AACvF;;AAEA,8BAA8B,mCAAmC;AACjE;AACA;AACA;AACA,2BAA2B,KAAK,GAAG,IAAI;AACvC;AACA;AACA,yCAAyC,yEAAyE;AAClH,UAAU;AACV,yCAAyC,gEAAgE;AACzG,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,oBAAoB,eAAe;AACnC;AACA;AACA,2BAA2B,2BAA2B;AACtD;;AAEA,iBAAiB,2BAA2B;AAC5C,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,oCAAoC;AACpC;AACA;;AAEA;AACA;;;;;;;;ACxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjDA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACLA;AACA;;;;;;;;ACDA;AACA;AACA;;;;;;;;ACFA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA,iBAAiB,mBAAO,CAAC,GAA0B;;AAEnD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,GAAa;AACpC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,kBAAkB,mBAAO,CAAC,GAAuB;;AAEjD;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA,mBAAmB,+BAA+B,wBAAwB;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,kCAAkC,wBAAwB;AAC7E;AACA;;AAEA;AACA;;;;;;;;ACRA,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,oBAAoB,mBAAO,CAAC,GAAwB;;AAEpD;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,sCAAsC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,sCAAsC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,sCAAsC;AAC7D,KAAK;AACL;AACA,MAAM,wFAAwF;AAC9F,MAAM,wFAAwF;AAC9F,MAAM,wFAAwF;AAC9F;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,QAAQ;AACjC,6EAA6E,QAAQ;AACrF,uEAAuE,QAAQ;AAC/E;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC,0DAA0D,cAAc;AACxE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B,yEAAyE,QAAQ;AACjF,mEAAmE,QAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC,sDAAsD,cAAc;AACpE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC5EA,iBAAiB,mBAAO,CAAC,GAAuB;;AAEhD;AACA;AACA;;;;;;;UCJA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-settings/./backend/src/bean/bean.settings.js","webpack://egg-born-module-a-settings/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-settings/./backend/src/beans.js","webpack://egg-born-module-a-settings/./backend/src/config/config.js","webpack://egg-born-module-a-settings/./backend/src/config/constants.js","webpack://egg-born-module-a-settings/./backend/src/config/errors.js","webpack://egg-born-module-a-settings/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-settings/./backend/src/config/locales.js","webpack://egg-born-module-a-settings/./backend/src/config/static/resources.js","webpack://egg-born-module-a-settings/./backend/src/controller/settings.js","webpack://egg-born-module-a-settings/./backend/src/controllers.js","webpack://egg-born-module-a-settings/./backend/src/main.js","webpack://egg-born-module-a-settings/./backend/src/meta.js","webpack://egg-born-module-a-settings/./backend/src/model/settings.js","webpack://egg-born-module-a-settings/./backend/src/model/settingsRef.js","webpack://egg-born-module-a-settings/./backend/src/models.js","webpack://egg-born-module-a-settings/./backend/src/routes.js","webpack://egg-born-module-a-settings/./backend/src/service/settings.js","webpack://egg-born-module-a-settings/./backend/src/services.js","webpack://egg-born-module-a-settings/webpack/bootstrap","webpack://egg-born-module-a-settings/webpack/before-startup","webpack://egg-born-module-a-settings/webpack/startup","webpack://egg-born-module-a-settings/webpack/after-startup"],"sourcesContent":["const constants = require('../config/constants.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Settings extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'settings');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get modelSettings() {\n      return ctx.model.module(moduleInfo.relativeName).settings;\n    }\n\n    get modelSettingsRef() {\n      return ctx.model.module(moduleInfo.relativeName).settingsRef;\n    }\n\n    // get\n\n    async getUser({ module, name }) {\n      return await this._get({ scene: 'user', module, name });\n    }\n\n    async getInstance({ module, name }) {\n      return await this._get({ scene: 'instance', module, name });\n    }\n\n    // user\n\n    async loadSettingsUser(ops) {\n      ops = ops || {};\n      return await this._loadSettings({ scene: 'user', module: ops.module });\n    }\n\n    async loadValidatorUser(ops) {\n      ops = ops || {};\n      return this._getValidator({ scene: 'user', module: ops.module });\n    }\n\n    async saveSettingsUser({ module, data }) {\n      return await this._saveSettings({ scene: 'user', module, data });\n    }\n\n    // instance\n\n    async loadSettingsInstance(ops) {\n      ops = ops || {};\n      return await this._loadSettings({ scene: 'instance', module: ops.module });\n    }\n\n    async loadValidatorInstance(ops) {\n      ops = ops || {};\n      return this._getValidator({ scene: 'instance', module: ops.module });\n    }\n\n    async saveSettingsInstance({ module, data }) {\n      return await this._saveSettings({ scene: 'instance', module, data });\n    }\n\n    // function\n\n    async _get({ scene, module, name }) {\n      module = module || this.moduleName;\n      const res = await this.modelSettingsRef.get({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.state.user.op.id : 0,\n        name,\n      });\n      return res ? JSON.parse(res.value) : this._parse(ctx.config.module(module).settings[scene], name);\n    }\n\n    _parse(data, path) {\n      for (const name of path.split('/')) {\n        if (name) data = data[name];\n      }\n      return data;\n    }\n\n    async _loadSettings({ scene, module }) {\n      module = module || this.moduleName;\n      const res = await this.modelSettings.get({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.state.user.op.id : 0,\n      });\n      // always extend config, as maybe has new values\n      const config = ctx.config.module(module).settings[scene];\n      return res ? ctx.bean.util.extend({}, config, JSON.parse(res.value)) : config;\n    }\n\n    async _saveSettings({ scene, module, data }) {\n      module = module || this.moduleName;\n      const validator = this._getValidator({ scene, module });\n      if (!validator) ctx.throw(404); // not found\n      await ctx.bean.validation.validate({\n        module: validator.module,\n        validator: validator.validator,\n        schema: null,\n        data,\n        filterOptions: true,\n      });\n      // update aSettings\n      const _data = await this.modelSettings.get({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.state.user.op.id : 0,\n      });\n      if (!_data) {\n        // new\n        await this.modelSettings.insert({\n          module,\n          scene: constants.scene[scene],\n          userId: scene === 'user' ? ctx.state.user.op.id : 0,\n          value: JSON.stringify(data),\n        });\n      } else {\n        await this.modelSettings.update({\n          id: _data.id,\n          value: JSON.stringify(data),\n        });\n      }\n      // save aSettingsRef\n      await this._saveSettingsRef({ scene, module, data });\n    }\n\n    async _saveSettingsRef({ scene, module, data }) {\n      // remove aSettingsRef\n      await this.modelSettingsRef.delete({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.state.user.op.id : 0,\n      });\n      // update aSettingsRef\n      await this._saveSettingsRef1({ scene, module, data, schemaName: null, path: '' });\n    }\n\n    async _saveSettingsRef1({ scene, module, data, schemaName, path }) {\n      const schema = this._getSchema({ scene, module, schemaName });\n      await this._saveSettingsRef2({ scene, module, data, schema: schema.schema, path });\n    }\n\n    async _saveSettingsRef2({ scene, module, data, schema, path }) {\n      for (const key in schema.properties) {\n        const subSchema = schema.properties[key];\n        if (!subSchema.type) continue;\n        const subPath = `${path}/${key}`;\n        const subData = data[key];\n        if (subSchema.$ref) {\n          await this._saveSettingsRef1({ scene, module, data: subData, schemaName: subSchema.$ref, path: subPath });\n        } else if (subSchema.ebType === 'group') {\n          await this._saveSettingsRef2({ scene, module, data: subData, schema: subSchema, path: subPath });\n        } else {\n          await this.modelSettingsRef.insert({\n            module,\n            scene: constants.scene[scene],\n            userId: scene === 'user' ? ctx.state.user.op.id : 0,\n            name: subPath,\n            value: JSON.stringify(subData),\n          });\n        }\n      }\n    }\n\n    _getValidator({ scene, module }) {\n      module = module || this.moduleName;\n      const validator = ctx.app.meta.modules[module].main.meta.settings[scene].validator;\n      return validator ? { module, scene, validator } : null;\n    }\n\n    _getSchema({ scene, module, schemaName }) {\n      const validator = this._getValidator({ scene, module });\n      if (!validator) return null;\n      const schema = ctx.bean.validation.getSchema({\n        module: validator.module,\n        validator: validator.validator,\n        schema: schemaName,\n      });\n      return ctx.bean.util.extend({}, schema);\n    }\n  }\n\n  return Settings;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aSettings\n        let sql = `\n          CREATE TABLE aSettings (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            scene int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            value json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aSettingsRef\n        sql = `\n          CREATE TABLE aSettingsRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            scene int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            value json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // empty\n      }\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst beanSettings = require('./bean/bean.settings.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // global\n    settings: {\n      mode: 'ctx',\n      bean: beanSettings,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {};\n\n  return config;\n};\n","module.exports = {\n  scene: {\n    user: 1,\n    instance: 2,\n  },\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  Settings: '设置',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // function\n    {\n      atomName: 'Settings',\n      atomStaticKey: 'settings',\n      atomRevision: 1,\n      atomCategoryId: 'a-base:function.Tools',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/settings/instance/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  class SettingsController extends app.Controller {\n    // instance\n\n    instanceList() {\n      const res = this.service.settings.instanceList();\n      this.ctx.successMore(res, 0, -1);\n    }\n\n    async instanceLoad() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.settings.instanceLoad(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async instanceSave() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.settings.instanceSave(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    // user\n\n    userList() {\n      const res = this.service.settings.userList();\n      this.ctx.successMore(res, 0, -1);\n    }\n\n    async userLoad() {\n      const res = await this.service.settings.userLoad(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async userSave() {\n      const res = await this.service.settings.userSave(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n  }\n  return SettingsController;\n};\n","const settings = require('./controller/settings.js');\n\nmodule.exports = app => {\n  const controllers = {\n    settings,\n  };\n  return controllers;\n};\n","const services = require('./services.js');\nconst models = require('./models.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    constants,\n    meta,\n  };\n};\n","module.exports = app => {\n  // static\n  const staticResources = require('./config/static/resources.js')(app);\n  const meta = {\n    base: {\n      statics: {\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Settings extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aSettings', options: { disableDeleted: true } });\n    }\n  }\n\n  return Settings;\n};\n","module.exports = app => {\n  class SettingsRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aSettingsRef', options: { disableDeleted: true } });\n    }\n  }\n\n  return SettingsRef;\n};\n","const settings = require('./model/settings.js');\nconst settingsRef = require('./model/settingsRef.js');\n\nmodule.exports = {\n  settings,\n  settingsRef,\n};\n","module.exports = app => {\n  const routes = [\n    // settings:instance\n    {\n      method: 'post',\n      path: 'settings/instance/list',\n      controller: 'settings',\n      action: 'instanceList',\n      meta: { right: { type: 'resource', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'settings/instance/load',\n      controller: 'settings',\n      action: 'instanceLoad',\n      meta: { right: { type: 'resource', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'settings/instance/save',\n      controller: 'settings',\n      action: 'instanceSave',\n      meta: { right: { type: 'resource', name: 'settings' } },\n    },\n    // settings:user\n    { method: 'post', path: 'settings/user/list', controller: 'settings', action: 'userList' },\n    { method: 'post', path: 'settings/user/load', controller: 'settings', action: 'userLoad' },\n    { method: 'post', path: 'settings/user/save', controller: 'settings', action: 'userSave' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  let _instanceList = null;\n  let _userList = null;\n\n  class Settings extends app.Service {\n    // instance\n\n    instanceList() {\n      if (!_instanceList) {\n        _instanceList = this._prepareSettingsList('instance');\n      }\n      return _instanceList;\n    }\n\n    async instanceLoad({ module }) {\n      const validator = await this.ctx.bean.settings.loadValidatorInstance({ module });\n      const data = await this.ctx.bean.settings.loadSettingsInstance({ module });\n      return {\n        module,\n        validator: validator.validator,\n        data,\n      };\n    }\n\n    async instanceSave({ module, data }) {\n      await this.ctx.bean.settings.saveSettingsInstance({ module, data });\n    }\n\n    // user\n\n    userList() {\n      if (!_userList) {\n        _userList = this._prepareSettingsList('user');\n      }\n      return _userList;\n    }\n\n    async userLoad({ module }) {\n      const validator = await this.ctx.bean.settings.loadValidatorUser({ module });\n      const data = await this.ctx.bean.settings.loadSettingsUser({ module });\n      return {\n        module,\n        validator: validator.validator,\n        data,\n      };\n    }\n\n    async userSave({ module, data }) {\n      await this.ctx.bean.settings.saveSettingsUser({ module, data });\n    }\n\n    //\n\n    _prepareSettingsList(scene) {\n      const list = [];\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.settings && module.main.meta.settings[scene]) {\n          const settings = module.main.meta.settings[scene];\n          const item = {\n            module: relativeName,\n            validator: settings.validator,\n          };\n          if (settings.actionComponent || settings.actionPath) {\n            item.actionModule = item.module;\n            item.actionComponent = settings.actionComponent;\n            item.actionPath = settings.actionPath;\n          }\n          list.push(item);\n        }\n      }\n      return list;\n    }\n  }\n\n  return Settings;\n};\n","const settings = require('./service/settings.js');\n\nmodule.exports = {\n  settings,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}